// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using QuickType;
//
//    var pantry = Pantry.FromJson(jsonString);
//    var fridge = Fridge.FromJson(jsonString);
//    var breadSlice = BreadSlice.FromJson(jsonString);
//    var jelly = Jelly.FromJson(jsonString);
//    var pb = Pb.FromJson(jsonString);
//    var jellySlice = JellySlice.FromJson(jsonString);
//    var pbSlice = PbSlice.FromJson(jsonString);
//    var pbjSandwhich = PbjSandwhich.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Pantry
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class Fridge
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class BreadSlice
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class Jelly
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class Pb
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class JellySlice
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class PbSlice
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class PbjSandwhich
    {
        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class Pantry
    {
        public static Pantry FromJson(string json) => JsonConvert.DeserializeObject<Pantry>(json, QuickType.Converter.Settings);
    }

    public partial class Fridge
    {
        public static Fridge FromJson(string json) => JsonConvert.DeserializeObject<Fridge>(json, QuickType.Converter.Settings);
    }

    public partial class BreadSlice
    {
        public static BreadSlice FromJson(string json) => JsonConvert.DeserializeObject<BreadSlice>(json, QuickType.Converter.Settings);
    }

    public partial class Jelly
    {
        public static Jelly FromJson(string json) => JsonConvert.DeserializeObject<Jelly>(json, QuickType.Converter.Settings);
    }

    public partial class Pb
    {
        public static Pb FromJson(string json) => JsonConvert.DeserializeObject<Pb>(json, QuickType.Converter.Settings);
    }

    public partial class JellySlice
    {
        public static JellySlice FromJson(string json) => JsonConvert.DeserializeObject<JellySlice>(json, QuickType.Converter.Settings);
    }

    public partial class PbSlice
    {
        public static PbSlice FromJson(string json) => JsonConvert.DeserializeObject<PbSlice>(json, QuickType.Converter.Settings);
    }

    public partial class PbjSandwhich
    {
        public static PbjSandwhich FromJson(string json) => JsonConvert.DeserializeObject<PbjSandwhich>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Pantry self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Fridge self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this BreadSlice self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Jelly self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Pb self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this JellySlice self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this PbSlice self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this PbjSandwhich self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
